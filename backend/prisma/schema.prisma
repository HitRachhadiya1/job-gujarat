generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(uuid())
  email            String          @unique
  role             UserRole
  status           UserStatus      @default(ACTIVE)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  verifiedAadhaars AadhaarVault[]  @relation("AadhaarVerifiedByAdmin")
  AuditLogs        AdminAuditLog[] @relation("UserAdminActions")
  Company          Company?
  ConsentRecords   ConsentRecord[]
  JobSeeker        JobSeeker?
  Notifications    Notification[]
}

model JobSeeker {
  id                  String               @id @default(uuid())
  userId              String               @unique
  fullName            String
  phone               String?
  location            String?
  skills              String[]
  experienceYears     Int?
  resumeUrl           String?
  aadhaarStatus       AadhaarStatus        @default(PENDING)
  aadhaarDocumentUrl  String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  profilePhotoUrl     String?
  AadhaarVault        AadhaarVault?
  Applications        JobApplication[]
  user                User                 @relation(fields: [userId], references: [id])
  PaymentTransactions PaymentTransaction[]
  SavedJobs           SavedJob[]
}

model AadhaarVault {
  id             String        @id @default(uuid())
  jobSeekerId    String        @unique
  encryptedValue String
  status         AadhaarStatus @default(PENDING)
  verifiedById   String?
  verifiedAt     DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  jobSeeker      JobSeeker     @relation(fields: [jobSeekerId], references: [id])
  verifiedBy     User?         @relation("AadhaarVerifiedByAdmin", fields: [verifiedById], references: [id])
}

model Company {
  id          String               @id @default(uuid())
  userId      String               @unique
  name        String
  industry    String?
  logoUrl     String?
  website     String?
  description String?
  verified    Boolean              @default(false)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  user        User                 @relation(fields: [userId], references: [id])
  Jobs        JobPosting[]
  Payments    PaymentTransaction[]
}

model JobPosting {
  id                  String               @id @default(uuid())
  companyId           String
  title               String
  description         String
  requirements        String[]
  location            String?
  jobType             JobType
  salaryRange         String?
  status              JobStatus            @default(DRAFT)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  expiresAt           DateTime?
  categoryId          String?
  Applications        JobApplication[]
  category            Category?            @relation("JobCategory", fields: [categoryId], references: [id])
  company             Company              @relation(fields: [companyId], references: [id])
  PaymentTransactions PaymentTransaction[]
  SavedJobs           SavedJob[]
}

model JobApplication {
  id                  String               @id @default(uuid())
  jobId               String
  jobSeekerId         String
  status              ApplicationStatus    @default(APPLIED)
  coverLetter         String?
  resumeSnapshot      String?
  aadhaarDocumentUrl  String?
  appliedAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  job                 JobPosting           @relation(fields: [jobId], references: [id])
  jobSeeker           JobSeeker            @relation(fields: [jobSeekerId], references: [id])
  PaymentTransactions PaymentTransaction[]
}

model PaymentTransaction {
  id            String          @id @default(uuid())
  companyId     String?
  jobPostingId  String?
  gateway       String
  transactionId String          @unique
  amount        Decimal
  currency      String          @default("INR")
  status        PaymentStatus   @default(PENDING)
  createdAt     DateTime        @default(now())
  completedAt   DateTime?
  applicationId String?
  jobSeekerId   String?
  paymentType   PaymentType
  pricingPlanId String?
  application   JobApplication? @relation(fields: [applicationId], references: [id])
  company       Company?        @relation(fields: [companyId], references: [id])
  jobPosting    JobPosting?     @relation(fields: [jobPostingId], references: [id])
  jobSeeker     JobSeeker?      @relation(fields: [jobSeekerId], references: [userId])
  pricingPlan   PricingPlan?    @relation("PlanPurchases", fields: [pricingPlanId], references: [id])
}

model Notification {
  id           String              @id @default(uuid())
  userId       String
  templateKey  String
  channel      NotificationChannel @default(EMAIL)
  status       NotificationStatus  @default(PENDING)
  payload      Json?
  scheduledFor DateTime?
  sentAt       DateTime?
  errorMessage String?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  user         User                @relation(fields: [userId], references: [id])
}

model AdminAuditLog {
  id         String   @id @default(uuid())
  adminId    String
  action     String
  objectType String
  objectId   String
  changes    Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
  admin      User     @relation("UserAdminActions", fields: [adminId], references: [id])
}

model ConsentRecord {
  id          String    @id @default(uuid())
  userId      String
  consentType String
  granted     Boolean
  grantedAt   DateTime  @default(now())
  revokedAt   DateTime?
  version     Int       @default(1)
  user        User      @relation(fields: [userId], references: [id])
}

model SavedJob {
  id          String     @id @default(uuid())
  jobSeekerId String
  jobId       String
  savedAt     DateTime   @default(now())
  job         JobPosting @relation(fields: [jobId], references: [id])
  jobSeeker   JobSeeker  @relation(fields: [jobSeekerId], references: [id])

  @@unique([jobSeekerId, jobId])
}

model Category {
  id          String       @id @default(uuid())
  name        String       @unique
  description String?
  active      Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  jobs        JobPosting[] @relation("JobCategory")
}

model PricingPlan {
  id        String               @id @default(uuid())
  name      String               @unique
  price     Decimal
  duration  Int
  features  String[]
  active    Boolean              @default(true)
  popular   Boolean              @default(false)
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  purchases PaymentTransaction[] @relation("PlanPurchases")
}

enum UserRole {
  JOB_SEEKER
  COMPANY
  ADMIN
}

enum UserStatus {
  ACTIVE
  SUSPENDED
}

enum AadhaarStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
}

enum JobStatus {
  DRAFT
  PUBLISHED
  CLOSED
  REJECTED
  FLAGGED
}

enum ApplicationStatus {
  APPLIED
  INTERVIEW
  HIRED
  REJECTED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}

enum PaymentType {
  JOB_POSTING_FEE
  APPLICATION_FEE
  APPROVAL_FEE
  SUBSCRIPTION_FEE
}

enum NotificationChannel {
  EMAIL
  SMS
  PUSH
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
}
